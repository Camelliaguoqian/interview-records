“旨在提供一种简单的构建可伸缩网络程序的方法”
·Node.js是啥？
  Nodejs 不是一种独立的语言
  Nodejs 是一个让JavaScript运行在服务端的开发的平台
  服务器端的JavaScript
  允许开发人员使用JavaScript语言写服务器端代码的框架(其实Nodejs是对Commonjs规范的一种很好的实现)
  其本身利用Google V8 JavaScript引擎，所以速度和性能非常好，而且Nodejs又对其进行了封装，同时还改进了其处理二进制数据的能力（Nodejs对引入过的模块都会进行缓存，且核心模块的缓存检查先于文件模块的缓存检查）
  Nodejs不是一个web服务器，只是计算机上执行代码的另一种方式，它是一个简单的JavaScript Runtime.

js是由客户端而产生，Nodejs为网络而生
Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。 Node.js 使用高效、轻量级的事件驱动、非阻塞 I/O 模型。Node.js 的生态系统是目前最大的开源包管理系统。

·Node能做什么？
  具有复杂逻辑的网站
  局域社交网站的大web的应用
  Web Scoket服务器
  TCP/UDP套接字应用程序
　命令行工具
  交互式终端程序
 这有啥拽的，从技术上说就是各种的封装，并没有新大陆呀？？！！！！我大微软C#也能解决，给你个.Net自己体会去吧，后面跟着C/C++，路过…
 说到这点，这儿有一位，绝壁的狠狠的喷了一把， SolidMango 《NODE.JS之我见》
总之，各执其词，不好定论，正如SolidMango所说，坚守己见，不要盲从，看自己怎么理解吧。

·Node的优点：
1. 它是一个JavaScript运行环境 (Nodejs采用C++语言编写而成）
2. 依赖于浏览器V8引擎进行代码解释
3. 事件驱动
4. 非阻塞
5. 异步I/O
6. 轻量、可伸缩，适于实时数据交互应用
7. 单进程，单线程
    Node.Js最大特性是采用异步式I/O与事件驱动的架构设计。对于高并发的解决方案，传统的架构是多线程模型，也就是每个业务逻辑提供一个系统线程，通过系统线程切换来弥补同步式I/O调用时的时间开销.
    Node.Js采用的是单线程模型，在执行过程中会维护一个事件队列，程序在执行时在进入事件循环等待下一个事件的到来。
【转】【https://www.cnblogs.com/fuguoliang/p/5908126.html】
#对Http的封装 (Nodejs其底层已经是封装好的服务器)
a. 全局方法require()是用来导入模块的，一般直接把 require() 方法的返回值赋值给一个变量，可直接使用此变量。require("http") 就是加载系统预置的 http 模块
b. http.createServer 是模块的方法，目的就是创建并返回一个新的web server对象，并且给服务绑定一个回调，用以处理请求。
c. 通过 http.listen() 方法就可以让该 HTTP 服务器在特定端口监听。
---------
当一个request到来时，EventLoop会将这个Listener回调函数放入执行队列， Nodejs中所有的代码都是一个一个从执行队列中拿出来执行的。
这些执行都是在工作线程上(Event Loop本身可以认为在一个独立的线程中，我们一般不提这个线程，而将Nodejs称呼为一个单线程的执行环境),
所有的回调都是在一个工作线程上运行。
EventLoop 指的是计算机系统的一种运行机制。简单的说就是，在程序中设置两个线程：一个是负责程序本身的运行，称为“主线程”；另一个负责主线程与其他进程（主要是I/O操作）的通信。 也可以叫 “消息线程”
开发Nodejs程序，调试的时候，无论修改了那一部分代码，都需要重启服务才能生效，这是因为Nodejs只有在第一次引用到某部分的时候才会去解析脚本，以后都会直接访问内存，避免重复载入
缺点：提高了效率，却不利于程序调试
解决方案：supervisor ，会监视对代码的改动，并自动重启Node.js
   安装supervisor：用npm安装，输入命令符 npm -g install supervisor 
    ps:必须安装到全局，否则错误命令也会提示安装到全局
    or:修改全局路径到当前路径 npm config set prefix "路径"
 supervisor server.js     //开始监视server.js
 但是如果出错，会不停的刷cmd，以及网页间断性报错
 
#Node.Js的异步式IO与事件式编程
1. 同步式I/O或阻塞式I/O
2. 异步式I/O或非阻塞式I/O
3. 非阻塞与阻塞模式区别
4. 同步式IO与异步式IO区别
异步式  少了多线程的开销 不符合传统编程思维
同步式  会执行内存换页，cpu的缓存会被清空，重新读取内存

#Node.js的事件循环机制
(1) Node.js在什么时候进入事件循环呢？
Node.js程序是由事件循环开始，到事件循环结束，所有的逻辑都是事件的回调函数。
(2) 如何使用自定义事件呢？
事件的回调函数在执行的过程中，可能会发出IO请求或直接发射(emit)事件，执行完毕后再返回事件循环。

#模块(Module)和包(Package)
(1)模块
不同的功能组件，划分为不同的模块
模块的定义十分简单，接口也十分简单。它的意义就是将类聚的方法或变量限定在私有的作用域中，同时支持引入和导出功能以便顺畅的链接上下游依赖
例如：
var http = require('http')   // 其中http是Node.js的一个核心模块，通过require函数获取这个模块，然后使用其中的对象
Node.js提供了exports和require两个对象，其中exports是模块公开的接口，require用于从外部获取一个模块的接口，即获取模块的exports对象
通常使用module.exports，因为在exports对象是用过形参的方式传入的，直接赋值形参会改变形参的引用，单并不能改变作用域外的值
 (2)包
包是在模块基础上更深一步的抽象，Node.js的包类似于C/C++的函数库或者java的类库，它讲某个独立的功能封装起来，用于发布、更新、依赖管理的版本控制。开发了npm来解决包的发布和获取需求 
我们使用这种方法可以把文件夹封装成一个模块，即所谓的包。包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库，通过定制package.json，我们可以创建更复杂、更完善、更符合规范的包用于发布。

#文件操作
Nodejs 中的 fs 模块用来对本地文件进行操作。文件的I/O是由标准POSIX函数封装而成。需要使用require('fs')访问这个模块。所有的方法都提供了异步和同步两种方式。
fs 模块中提供的方法可以用来执行基本的文件操作，包括读、写、重命名、移动、创建和删除目录以及获取文件元数据等。每个操作文件的方法都有同步和异步两个版本。
异步操作的版本都会使用一个回调方法作为最后一个参数。当操作完成的时候，该回调方法会被调用。而回调方法的第一个参数总是保留为操作时可能出现的异常。如果操作正确成功，则第一个参数的值是 null 或 undefined


========================================================================================================================================
Node.js Express 框架
Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。
使用 Express 可以快速地搭建一个完整功能的网站。
Express 框架核心特性：
可以设置中间件来响应 HTTP 请求。
定义了路由表用于执行不同的 HTTP 请求动作。
可以通过向模板传递参数来动态渲染 HTML 页面。















